1.3  加入ceph社区！
Get Involved in the Ceph Community!
These are exciting times in the Ceph community! Get involved!
在ceph社区里有激动人心的时刻，加入吧！
频道
描述
联系信息
Blog
Check the Ceph Blog periodically to keep track of Ceph progress and important announcements.
经常检查blog来跟踪ceph进展和重要通告。
http://ceph.com/community/blog/
Planet Ceph
Check the blog aggregation on Planet Ceph for interesting stories, information and experiences from the community.
看看Planet Ceph频道收集的blog文章，发现有意思的故事、信息、和大家的经验分享。
http://ceph.com/community/planet-ceph/
Wiki
Check the Ceph Wiki is a source for more community and development related topics. You can find there information about blueprints, meetups, the Ceph Developer Summits and more.
Wiki里有更多和社区、开发相关的话题，在这里你可以了解ceph未来的蓝图、面谈、开发者峰会等等。
https://wiki.ceph.com/
IRC
As you delve into Ceph, you may have questions or feedback for the Ceph development team. Ceph developers are often available on the #ceph IRC channel particularly during daytime hours in the US Pacific Standard Time zone. While #ceph is a good starting point for cluster operators and users, there is also #ceph-devel dedicated for Ceph developers.
随着您对ceph的深入了解，您也许有问题或回馈给ceph开发团队。ceph开发者经常在IRC的#ceph频道，尤其是美国太平洋标准时区白天工作时间。#ceph频道适合集群操作员和用户，#ceph-devel适合ceph开发人员
Domain: irc.oftc.net
Channels: #ceph and #ceph-devel
User List
Ask and answer user-related questions by subscribing to the email list at ceph-users@ceph.com. You can opt out of the email list at any time by unsubscribing. A simple email is all it takes! If you would like to view the archives, go to Gmane.
订阅ceph-users@ceph.com 后可以提问或回答用户相关的问题，也可以随时退定，只需一封邮件即可搞定！要是想看存档，可以到Gmane。
User Subscribe
User Unsubscribe
Gmane for Users
Devel List
Keep in touch with developer activity by subscribing to the email list at ceph-devel@vger.kernel.org. You can opt out of the email list at any time by unsubscribing. A simple email is all it takes! If you would like to view the archives, go to Gmane.
你可以订阅位于 ceph-devel@vger.kernel.org的邮件列表来和开发者保持联系，也可以随时离开。您也可以到Gmane查看历史存档。
Devel Subscribe
Devel Unsubscribe
Gmane for Developers
Commit List
Subscribe to ceph-commit@ceph.com to get commit notifications via email. You can opt out of the email list at any time by unsubscribing. A simple email is all it takes!
订阅ceph-commit@ceph.com后能收到提交通知邮件，同样，只需一封邮件即可随时退定。
Commit Subscribe
Commit Unsubscribe
Mailing list archives
QA List
For Quality Assurance (QA) related activities subscribe to this list. You can opt out of the email list at any time by unsubscribing. A simple email is all it takes!
订阅这个列表可关注软件品质相关的问题，同样，只需一封邮件即可随时退定。
QA Subscribe
QA Unsubscribe
Mailing list archives
Community List
For all discussions related to the Ceph User Committee and other community topics. You can opt out of the email list at any time by unsubscribing. A simple email is all it takes!
这里讨论与ceph用户委员会和其它社区相关的话题，同样，只需一封邮件即可随时退定。
Community Subscribe
Community Unsubscribe
Mailing list archives
Bug Tracker
You can help keep Ceph production worthy by filing and tracking bugs, and providing feature requests using the Bug Tracker.
您可以使用问题跟踪系统来帮助我们提升ceph稳定性，或提出新功能申请。
http://tracker.ceph.com/projects/ceph
Source Code
If you would like to participate in development, bug fixing, or if you just want the very latest code for Ceph, you can get it at http://github.com. See Ceph Source Code for details on cloning from github.
如果您想参与开发、问题修正，或者想要最新源码，您可以从 http://github.com获取，参见 Ceph Source Code如何从github克隆源码。
http://github.com/ceph/ceph
http://ceph.com/download
Support
If you have a very specific problem, an immediate need, or if your deployment requires significant help, consider commercial support.
如果您有特殊问题、急切的需求、或者您的部署需要大量帮助，请考虑商业支持。
http://inktank.com
 1.4  贡献ceph文档
Documenting Ceph
The easiest way to help the Ceph project is to contribute to the documentation. As the Ceph user base grows and the development pace quickens, an increasing number of people are updating the documentation and adding new information. Even small contributions like fixing spelling errors or clarifying instructions help the Ceph project immensely.
When you view Ceph documentation online, the primary link is http://ceph.com/docs/master. The documentation source in the ceph/docs directory gets rendered to HTML and presented online. The master portion of the path reflects the branch name, which means you can view documentation for older branches (e.g., argonaut) or future branches (e.g., next) as well as work-in-progress branches.
帮助ceph项目的最简单的方法之一就是贡献文档，随着ceph用户量的增长和开发的迅速推进，越来越多的人在更新文档、增加新条目。即使是修正拼写错误或增加说明这样的小贡献也会提升ceph项目的品质。
ceph文档的在线版本位于 http://ceph.com/docs/master。这些文档是ceph/doc目录下的源码被渲染为HTML、然后在线展示。路径里的master部分表示分支名，也就是说你可以查看较早（如argonaut）或者未来的分支（如next），同样可以查看正在改进的分支。
 1.4.1  如何贡献
Making Contributions
Making a documentation contribution generally involves the same procedural sequence as making a code contribution, except that you must build documentation source instead of compiling program source. The sequence includes the following steps:
贡献文档和贡献源码的过程基本相同，唯一不同的就是你编译的是文档源码而不是程序源码。大致顺序如下：
1. Get the Source
2. Select a Branch
3. Make a Change
4. Build the Source
5. Commit the Change
6. Push the Change
7. Make a Pull Request
8. Notify the Relevant Person
 1.4.1.1  获取源代码
Get the Source
Ceph documentation lives in the Ceph repository right along side the Ceph source code under the ceph/doc directory. The most common way to make contributions is to use the Fork and Pull approach. To use this approach, you must:
ceph文档位于和源码同一仓库内的ceph/doc目录下，最常用的贡献方法是建分支、拉入。为此，必须先做到：
Install git locally.
在本地安装git。
sudo apt-get install git
Ensure your .gitconfig file has your name and email address.
在.gitconfig配置文件里写好自己的名字和邮件地址。
[user]
   email = {your-email-address}
   name = {your-name}
Create a github account (if you don’t have one).
创建github帐户（假如没有的话）。
Fork the Ceph project.
创建ceph项目的分支。
Clone your forked project.
克隆已分支项目。
All Ceph documentation resides under the ceph/doc directory and subdirectories of the Ceph repository. Ceph organizes documentation into an information architecture primarily by its main components.
ceph的所有文档都在源码库的ceph/doc目录及其子目录下，这些文档是按主要组件来分类组织的。
Ceph Storage Cluster: The Ceph Storage Cluster documentation resides under the doc/rados directory.
Ceph Block Device: The Ceph Block Device documentation resides under the doc/rbd directory.
Ceph Object Storage: The Ceph Object Storage documentation resides under the doc/radosgw directory.
Ceph Filesystem: The Ceph Filesystem documentation resides under the doc/cephfs directory.
Installation (Quick): Quick start documentation resides under the doc/start directory.
Installation (Manual): Manual installation documentation resides under the doc/install directory.
Manpage: Manpage source resides under the doc/man directory.
Developer: Developer documentation resides under the doc/dev directory.
Images: If you include images such as JPEG or PNG files, you should store them under the doc/images directory.
ceph存储集群：ceph存储集群文档位于doc/rados目录下；
ceph块设备：ceph块设备文档位于doc/rbd目录下；
ceph对象存储：ceph对象存储文档位于doc/radosgw目录下；
ceph文件系统：ceph文件系统文档位于doc/cephfs目录下；
安装（快速）：快速入门文档位于doc/start目录下；
安装（手动）：手动安装文档位于doc/install目录下；
手册页：手册源码位于doc/man目录下；
开发者：开发者文档位于doc/dev目录下；
图片：如果你想上传文档，如jpeg或png文件，应该放到doc/images目录下。
 1.4.1.2  进入分支
Select a Branch
When you make small changes to the documentation, such as fixing typographical errors or clarifying explanations, use the master branch (default). You should also use the master branch when making contributions to features that are in the current release. master is the most commonly used branch.
如果只是细小的变更，像修正排版错误、或换一种措辞，直接提交到master分支即可；为当前版本的功能提供文档时也应该提交到master分支。master是最常用的分支。
git checkout master
When you make changes to documentation that affect an upcoming release, use the next branch. next is the second most commonly used branch.
给未来版本提供文档时应该提交到next分支，next分支是第二常用的分支。
git checkout next
When you are making substantial contributions such as new features that are not yet in the current release; if your contribution is related to an issue with a tracker ID; or, if you want to see your documentation rendered on the Ceph.com website before it gets merged into the master branch, you should create a branch. To distinguish branches that include only documentation updates, we prepend them with wip-doc by convention, following the form wip-doc-{your-branch-name}. If the branch relates to an issue filed in http://tracker.ceph.com/issues, the branch name incorporates the issue number. For example, if a documentation branch is a fix for issue #4000, the branch name should be wip-doc-4000 by convention and the relevant tracker URL will be http://tracker.ceph.com/issues/4000.
你在为尚未发布的功能写文档时，如果这部分文档和已追踪的某个问题有关，或者想在它被合并到master分支前看看它在ceph.com网站上的预览，你应该另外创建个分支。为标识这是个只包含文档的更新，按惯例用wip-doc作前缀，按这个格式wip-doc-{your-branch-name}。如果此分支和 http://tracker.ceph.com/issues里的某个问题相关，分支名最好包含问题编号，例如，如果某文档分支是为#4000这个问题写的，按惯例这个分支名就是wip-doc-4000，对应的问题追踪URL就是 http://tracker.ceph.com/issues/4000。
Note: Please don’t commingle documentation contributions and source code contributions in a single pull request. Editors review the documentation and engineers review source code changes. When you keep documentation pull requests separate from source code pull requests, it simplifies the process and we won’t have to ask you to resubmit the requests separately.
提示：请不要把贡献的文档和源码混合到同一个pull请求里，因为文档由编辑审阅、而源码由工程师审阅。您分别提交文档和源码时，合并进度会很快，我们也不用让您重新提交。
Before you create your branch name, ensure that it doesn’t already exist in the local or remote repository.
创建分支前，确保本地和远程都没有同名的。
git branch -a | grep wip-doc-{your-branch-name}
If it doesn’t exist, create your branch:
如果确实不存在，就可以创建了：
git checkout -b wip-doc-{your-branch-name}
 1.4.1.3  开始更改
 Make a Change
Modifying a document simply involves opening a restructuredText file, changing its contents, and saving the changes. See Documentation Style Guide for details on syntax requirements.
Adding a document involves creating a new restructuredText file under the doc directory or its subdirectories and saving the file with a *.rst file extension. You must also include a reference to the document: a hyperlink or a table of contents entry. The index.rst file of a top-level directory usually contains a TOC, where you can add the new file name. All documents must have a title. See Headings for details.
Your new document doesn’t get tracked by git automatically. When you want to add the document to the repository, you must use git add {path-to-filename}. For example, from the top level directory of the repository, adding an example.rst file to the rados subdirectory would look like this:
修改文档很简单，打开restructuredText 文件、修改、保存即可。相关的语法请参考Documentation Style Guide。
新增文档要在doc目录或其子目录下新建restructuredText文件，并以*.rst作后缀。还必须包含对它的引用：如超链接或目录条目。某个顶极目录中的index.rst文件通常也包含一个TOC，你可以在这里添加新文件名。所有文档都必须有标题，详情见Headings。
你新建的文档不会自动被git跟踪，如果想把它加进仓库，必须用git add {path-to-filename}命令。比如，在ceph仓库的顶极目录下，把example.rst文件加到rados子目录下，可以这样：
git add doc/rados/example.rst
Deleting a document involves removing it from the repository with git rm {path-to-filename}. For example:
要删除一文档，应该用git rm {path-to-filename}，比如：
git rm doc/rados/example.rst
You must also remove any reference to the document from other documents.
还必须从其他文档删除与之相关的引用。
 1.4.1.4  构建源码
Build the Source
To build the documentation, navigate to the ceph repository directory; then execute the build script:
要想构建文档，先进入ceph库目录，然后执行构建脚本：
cd ceph
admin/build-doc
The build script will produce an output of errors and warnings. You MUST fix errors before committing a change, and you SHOULD fix warnings.
构建脚本可能会产生警告和报错，错误必须修复才能提交，警告应该尽量消除。
Important: You must validate ALL HYPERLINKS. If a hyperlink is broken, it automatically breaks the build!
重要：你必须核实所有超链接。损坏的超链接会中止构建过程。
The first time you build the documentation, the script will notify you if you do not have the dependencies installed. To run Sphinx, at least the following are required:
首次构建文档时，如果你没安装必要工具，构建脚本会提示你。要运行sphinx，至少要安装下面这些软件包：
python-dev
python-pip
python-virtualenv
libxml2-dev
libxslt-dev
doxygen
ditaa
graphviz
Install each dependency that isn’t installed on your host. For Debian/Ubuntu distributions, execute the following:
缺少的依赖都要安装，基于Debian/Ubuntu发行版的系统可以用此命令安装：
sudo apt-get install python-dev python-pip python-virtualenv libxml2-dev libxslt-dev doxygen ditaa graphviz ant
Once you build the documentation set, you may navigate to the source directory to view it:
构建完后，可以到源码目录看结果：
cd build-doc/output
There should be an html directory and a man directory containing documentation in HTML and manpage formats respectively.
应该会出现一个html目录和一个man目录，分别包含HTML和手册页。
 1.4.1.5  提交变更
Commit the Change
An easy way to manage your documentation commits is to use visual tools for git. For example, gitk provides a graphical interface for viewing the repository history, and git-gui provides a graphical interface for viewing your uncommitted changes, staging them for commit, committing the changes and pushing them to your forked Ceph repository.
Ceph documentation commits are simple, but follow a strict convention:
管理文档提交的一个比较简单的方法是用git的图形化前端，如gitk提供了可查看仓库历史的图形界面；git-gui提供的图形界面可查看未提交的变更、把未提交变更暂存起来、提交变更、并推送到自己的ceph分支仓库。
ceph文档的提交虽然简单，却遵循着严格的惯例：
A commit SHOULD have 1 file per commit (it simplifies rollback). You MAY commit multiple files with related changes. Unrelated changes SHOULD NOT be put into the same commit.
A commit MUST have a comment.
A commit comment MUST be prepended with doc:. (strict)
The comment summary MUST be one line only. (strict)
Additional comments MAY follow a blank line after the summary, but should be terse.
A commit MAY include Fixes: #{bug number}.
Commits MUST include Signed-off-by: Firstname Lastname <email>. (strict)
一次提交应该只涉及一个文件（方便回退），也可以一次提交有关联的多个文件。不相干的变更不应该放到同一提交内；
每个提交都必须有注释；
提交的注释必须以doc:打头（应严格遵守）；
注释摘要必须只有一行（应严格遵守）；
额外的注释可以写到摘要下面空一行的地方，但应该简单明了；
提交可以包含Fixes: #{bug number}字样；
提交必须包含Signed-off-by: Firstname Lasname <email>（应严格遵守）。
Tip: Follow the foregoing convention particularly where it says (strict) or you will be asked to modify your commit to comply with this convention.
提示：请遵守前述惯例，特别是标明了（应严格遵守）的那些，否则你的提交会被打回，修正后才能重新提交。
The following is a common commit comment (preferred):
下面是个通用提交的注释（首选）：
doc: Fixes a spelling error and a broken hyperlink.

Signed-off-by: John Doe <john.doe@gmail.com>
The following comment includes a reference to a bug.
下面的注释里有到BUG的引用。
doc: Fixes a spelling error and a broken hyperlink.

Fixes: #1234

Signed-off-by: John Doe <john.doe@gmail.com>
The following comment includes a terse sentence following the comment summary. There is a carriage return between the summary line and the description:
下面的注释包含一句概要和详述，在摘要和详述之间用空行隔开了：
doc: Added mon setting to monitor config reference

Describes 'mon setting', which is a new setting added
to config_opts.h.

Signed-off-by: John Doe <john.doe@gmail.com>
To commit changes, execute the following:
执行下列命令提交变更：
git commit -a
You can also a graphical editor like gitk and git-gui.
你也可以用图形编辑器，象gtk和git-gui。
sudo apt-get install gitk git-gui
cd {git-ceph-repo-path}
gitk
Then select File->Start git gui to activate the graphical user interface.
然后点击“ File->Start git gui”启动图形界面。
 1.4.1.6  推送变更
Push the Change
Once you have one or more commits, you must push them from the local copy of the repository to github. A graphical tool like git-gui provides a user interface for pushing to the repository.
你完成一或多个提交后，必须从本地推送到位于github的仓库。某些图形化工具（如git-gui）有推送菜单。
git push
 1.4.1.7  发出接收请求
Make a Pull Request
As noted earlier, you can make documentation contributions using the Fork and Pull approach.
前面已经说过了，你可以依照Fork and Pull方法共享文档。
 1.4.1.8  通知相关人员
Notify the Relevant Person
After you make a pull request, notify the relevant person. For general documentation pull requests, notify John Wilkins.
发出接收请求后，还需通知相关人员。通常，文档的接收请求应该发给John Wilkins。
 1.4.2  文档风格手册
Documentation Style Guide
One objective of the Ceph documentation project is to ensure the readability of the documentation in both native restructuredText format and its rendered formats such as HTML. Navigate to your Ceph repository and view a document in its native format. You may notice that it is generally as legible in a terminal as it is in its rendered HTML format. Additionally, you may also notice that diagrams in ditaa format also render reasonably well in text mode.
ceph文档项目的目标之一就是可读性，包括restructuredText和渲染后的HTML页面的可读性。进入ceph源码库，随便找个文档查看其源码，你会发现它们在终端下就像已经渲染过的HTML页面一样清晰明了。另外，也许你还看到ditaa格式的图表渲染的很漂亮。
cat doc/architecture.rst | less
Review the following style guides to maintain this consistency.
为了维持一致性，请遵守下面的风格手册。
 1.4.2.1  标题
Headings
1. Document Titles: Document titles use the = character overline and underline with a leading and trailing space on the title text line. See Document Title for details.
2. Section Titles: Section tiles use the = character underline with no leading or trailing spaces for text. Two carriage returns should precede a section title (unless an inline reference precedes it). See Sections for details.
3. Subsection Titles: Subsection titles use the _ character underline with no leading or trailing spaces for text. Two carriage returns should precede a subsection title (unless an inline reference precedes it).

1. 文档标题：标题行的前/后各加一行=，且标题行首、行尾各有一个空格，详情见 Document Title。
2. 段落标题：段标题行下是一行=，且标题行首、行尾都没有空格；段标题前应该有两个空行（除非前面是内嵌引用）。详情见Sections。
3. 小节标题：小节标题行下是一行-，且行首、行尾都没有空格；段标题前应该有两个空行（除非前面是内嵌引用）。
 1.4.2.2  正文
Text Body
As a general rule, we prefer text to wrap at column 80 so that it is legible in a command line interface without leading or trailing white space. Where possible, we prefer to maintain this convention with text, lists, literal text (exceptions allowed), tables, and ditaa graphics.
通常，我们把正文限制在80列之内，这样它在任何标准终端内都可以正确显示，行首、行尾都不能有空格。我们应该尽可能维持此惯例，包括文本、项目、文字文本（允许例外）、表格、和ditaa图形。
1. Paragraphs: Paragraphs have a leading and a trailing carriage return, and should be 80 characters wide or less so that the documentation can be read in native format in a command line terminal.
2. Literal Text: To create an example of literal text (e.g., command line usage), terminate the preceding paragraph with :: or enter a carriage return to create an empty line after the preceding paragraph; then, enter :: on a separate line followed by another empty line. Then, begin the literal text with tab indentation (preferred) or space indentation of 3 characters.
3. Indented Text: Indented text such as bullet points (e.g., - some text) may span multiple lines. The text of subsequent lines should begin at the same character position as the text of the indented text (less numbers, bullets, etc.).
Indented text may include literal text examples. Whereas, text indentation should be done with spaces, literal text examples should be indented with tabs. This convention enables you to add an additional indented paragraph following a literal example by leaving a blank line and beginning the subsequent paragraph with space indentation.
4. Numbered Lists: Numbered lists should use autonumbering by starting a numbered indent with #. instead of the actual number so that numbered paragraphs can be repositioned without requiring manual renumbering.
5. Code Examples: Ceph supports the use of the .. code-block::<language> role, so that you can add highlighting to source examples. This is preferred for source code. However, use of this tag will cause autonumbering to restart at 1 if it is used as an example within a numbered list. See Showing code examples for details.

1. 段落：段落前后各有一空行，且宽度不超过80字符，这样文档源码就可以在任何标准终端正确显示。
2. 引文文本：要创建引文文本（如展示命令行用法），前一段应以::结尾；或者先加一个空行、然后在新行上输入::、之后再加一个空行。之后以TAB（首选）或3个空格缩进，开始输入引文了。
3. 缩进文本：像要点这样的缩进文本（如：- some text）可能会延伸很多行，后续行应该延续和首行缩进（数字、圆点等）相同的起始列。
缩进文本也可以包含引文。这时，缩进文本仍然用空格标记、引文仍用TAB标记。按照这个惯例，你就可以额外增加缩进段落，并在其中嵌入引文示例（引文段前加空行，行前用空格缩进）。
4. 编号项目：需编号的列表应该在行首用#标识以实现自动编号，而不是手动标识，这样在条目顺序变更时就不用重新编号了。
5. 代码示例：ceph文档中可以用.. code-block::<language>按语种对源码进行高亮显示，对源代码应该这样标记。然而，使用这个标签时将导致编号项目从1开始重新编号，详情见 Showing code examples。
 1.4.2.3  段落分级标记
Paragraph Level Markup
The Ceph project uses paragraph level markup to highlight points.
ceph文档项目用段落分级标记来高亮显示要点。
1. Tip: Use the .. tip:: directive to provide additional information that assists the reader or steers the reader away from trouble.
2. Note: Use the .. note:: directive to highlight an important point.
3. Important: Use the .. important:: directive to highlight important requirements or caveats (e.g., anything that could lead to data loss). Use this directive sparingly, because it renders in red.
4. Version Added: Use the .. versionadded:: directive for new features or configuration settings so that users know the minimum release for using a feature.
5. Version Changed: Use the .. versionchanged:: directive for changes in usage or configuration settings.
6. Deprecated: Use the .. deprecated:: directive when CLI usage, a feature or a configuration setting is no longer preferred or will be discontinued.
7. Topic: Use the .. topic:: directive to encapsulate text that is outside the main flow of the document. See the topic directive for additional details.

1. 提示：用.. tip::指令标识额外信息，以助读者或操作员脱困。
2. 注意：用.. note::指令来高亮显示一个要点。
3. 重要：用.. important::指令来高亮显示重要依赖或警告（如可能导致数据丢失的事情）。尽量少用，因为它会渲染成红色背景。
4. 版本新增：用..versionadded::指令来标识新增功能或配置选项，这样用户才能知道此选项适用的最低版本。
5. 版本变更：用.. versionchanged::指令标识用法或配置选项的变更。
6. 已过时：用.. deprecated::指令标识不再推荐或将被移除的CLI用法、功能、或配置选项。
7. 论题：用.. topic::指令来封装位于文档主体之外的文本。详情见topic directive。
 1.4.2.4  TOC和超链接
TOC and Hyperlinks
All documents must be linked from another document or a table of contents, otherwise you will receive a warning when building the documentation.
The Ceph project uses the .. toctree:: directive. See The TOC tree for details. When rendering a TOC, consider specifying the :maxdepth: parameter so the rendered TOC is reasonably terse.
Document authors should prefer to use the :ref: syntax where a link target contains a specific unique identifier (e.g., .. _unique-target-id:), and a reference to the target specifically references the target (e.g., :ref:`unique-target-id`) so that if source files are moved or the information architecture changes, the links will still work. See Cross referencing arbitrary locations for details.
Ceph documentation also uses the backtick (accent grave) character followed by the link text, another backtick and an underscore. Sphinx allows you to incorporate the link destination inline; however, we prefer to use the use the .. _Link Text: ../path convention at the bottom of the document, because it improves the readability of the document in a command line interface.
所有文档都必须被链接到其他文档或列表内，否则构建时会被警告。
ceph项目采用.. toctree::指令（详情见 The TOC tree）。渲染时，最好用:maxdepth:参数把TOC修饰得简洁些。
链接目标是个惟一标识符（如.. _unique-target-id:）、而且某一引用明确引用了它（如:ref: `uniq-target-id`），这时应该优先用:ref:语法。这样，如果源文件位置或文档结构变更之后链接仍然有效，详情见Cross referencing arbitrary locations。
ceph文档内的链接可以这样写：反引号（重音符号）、之后跟着链接文本、另一个反引号、最后是下划线；Sphinx允许你内联链接目标。然而，我们喜欢这样用：在文档底部加.. _Link Text: ../path，因为这样的写法在命令行下可读性好。
