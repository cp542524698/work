创建instance页面url：XXX.xx.xx.xx/dashboard/project/instances/ 

相对应的代码目录：openstack_dashboard/dashboards/project/instances  


keystone endpoint-create \
--service-id $(keystone service-list | awk '/ compute / {print $2}') \
--publicurl http://node0:8774/v2/%\(tenant_id\)s \
--internalurl http://node0:8774/v2/%\(tenant_id\)s \
--adminurl http://node0:8774/v2/%\(tenant_id\)s \
--region regionOne

nginx：
	应用层的负载均衡、反向代理、
	地址重写 比如：www.ss.com 重写成：www.xxxx.com
	


设置反向代理：
	upstream my_server_pool{
	server 
	}
L2:数据链路层
L3：网络层


Layer 3 Network 	 Routers
Layer 2 Data link 	 switch hardware
Layer 1 physical


交换机与路由器之间的区别：连接不同网络之间的设备，路由  工作在L3， 转发ip数据包
						  连接同一网络的不同主机， 交换机 工作在L2 数据帧

混杂模式：1、接收所有经过设备的数据包；
		  2、用于抓包
		  3、floating ip实现

overlay 叠加网络：
	1、一个数据包（或帧）封装在另一个数据包内，被封装的包转发到隧道端点后再被拆装
	2、叠加网络就是使用这种所谓“包内之包”的技术安全地将一个网络隐藏在另一个网络中，然后将网络区段进行迁移

vlan、gre、vxlan

ovs：
	网络隔离：vlan、gre、vxlan
	QoS配置（流量控制）
	流量监控， Netflow、sFlow
	数据包分析： Packet Mirror

root namespace 到foo namespace互通：
1、创建net namespace
	#ip netns add foo
	#ip netns

	#ip netns exec foo ip a
	#ip netns exec foo ip link set lo up
	#ip netns exec foo ip a

	#ip netns exec foo route
	#ip netns exec foo iptables -nL

	对比一下，root namespace
    #iptables -nL

    #ip netns exec foo ping 10.20.0.10
    此时网络不通
    解决办法：建立隧道
    	1、创建一对veth peer
    		#ip link add tap-foo type veth peer name tap-root
    			tap-foo/tap-root
    		#ip a 可以看到ip设备
    	2、ethtool -S tap-root 
    	3、ethtool -S tap-foo

    	4、将其中一端加入到namespace：
    		ip link set tap-foo netns foo
    	对比：
    		#ip netns exec foo ip a
    		#ip a
    	5、配置ip：
    		#ip netns exec foo ip addr add 192.168.10.2/24 dev tap-foo
    		#ip netns exec foo ip link set tap-foo up
    	6、为root加入ip：
    		#ip addr add 192.168.10.1/24 dev tap-root
    		#ip link set tap-root up
    	#ping 192.168.1.2

虚拟机到物理机的互通使用openvswitch实现：
	删除virt默认的网络：
		1、virsh net-destroy default
		2、virsh net-list --all
		3、virsh net-autostart --disable default
		4、virsh net-undefine default
在libvirt里面定义ovs网络：
	#vim virt-net.xml
	<network>
		<name>ovs-network</name>
		<forward mode='bridge'/>
		<bridge name='br-int'/>
		<virtualport type='openvswitch'/>
		<portgroup name='no-vlan' default='yes'>
		</portgroup>
		<portgroup name='vlan-100'>
			<vlan>
				<tag id='100' />
			</vlan>
		</portgroup>
		<portgroup name='vlan-200'>
		<vlan>
			<tag id='200' />
		</vlan>
		</portgroup>
	</network>

#virsh net-define virt-net.xml
#virsh net-list
#virsh net-list --all
#virsh net-start ovs-network
#virsh net-list --all

启动一个实例，怎么跟host主机通信呢？
也就是联入openvswitch的网络里面

有一种网络设备（veth peer）比较特别，可以想象成一根网线，
一端需要插入到openvswitch，另一端插入到host主机
那么就他们就可以通信了；

进入实例，为实例的eth0设置ip
#ip addr add 192.168.1.20/24 dev eth0

#ovs-vsctl show
可以看到bridge，每个bridge的port；

添加网卡对
#ip link add br-int-tap100 type veth peer name tap100
将veth一端加入ovs中
#ovs-vsctl add-port br-int br-int-tap100
设置port的vlan id号
#ovs-vsctl set port br-int-tap100 tag=100
ip addr 192.168.1.21/24 dev tap100
ip link set tap up
ip link set br-int-tap100 up
